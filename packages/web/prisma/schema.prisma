// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(COACH)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  createdProfiles  Profile[] @relation("CreatedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id              String   @id @default(cuid())
  userId          String   @unique
  userEmail       String
  personalManual  Json
  voices          Json     // Array of 5 voice objects
  welcomeMessage  String
  version         Int      @default(1)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String
  
  creator         User     @relation("CreatedBy", fields: [createdBy], references: [id])
  activationCodes ActivationCode[]
}

model ActivationCode {
  id         String   @id @default(cuid())
  code       String   @unique
  userEmail  String
  profileId  String
  createdBy  String
  expiresAt  DateTime
  redeemedAt DateTime?
  isRedeemed Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model UsageCounter {
  id     String @id @default(cuid())
  userId String
  date   String // YYYY-MM-DD format
  turns  Int    @default(0)
  
  @@unique([userId, date])
}

enum UserRole {
  ADMIN
  COACH
}
