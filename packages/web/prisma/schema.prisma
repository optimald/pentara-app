// This is your Prisma schema file for Supabase
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(uuid()) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model User {
  id            String    @id @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(COACH)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts         Account[]
  sessions         Session[]
  createdProfiles  Profile[] @relation("CreatedBy")
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Profile {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @unique @map("user_id")
  userEmail       String   @map("user_email")
  personalManual  Json     @map("personal_manual")
  voices          Json     // Array of 5 voice objects
  welcomeMessage  String   @map("welcome_message")
  version         Int      @default(1)
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  createdBy       String   @db.Uuid @map("created_by")
  
  creator         User     @relation("CreatedBy", fields: [createdBy], references: [id])
  activationCodes ActivationCode[]
  
  @@map("profiles")
}

model ActivationCode {
  id         String   @id @default(uuid()) @db.Uuid
  code       String   @unique
  userEmail  String   @map("user_email")
  profileId  String   @db.Uuid @map("profile_id")
  createdBy  String   @db.Uuid @map("created_by")
  expiresAt  DateTime @map("expires_at")
  redeemedAt DateTime? @map("redeemed_at")
  isRedeemed Boolean  @default(false) @map("is_redeemed")
  createdAt  DateTime @default(now()) @map("created_at")
  
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  @@map("activation_codes")
}

model UsageCounter {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id")
  date      String   // YYYY-MM-DD format
  turns     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@unique([userId, date])
  @@map("usage_counters")
}

enum UserRole {
  ADMIN
  COACH
}
